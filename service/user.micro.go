// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: user.proto

package gotest

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for CrudUser service

type CrudUserService interface {
	CreateNewUser(ctx context.Context, in *UserInput, opts ...client.CallOption) (*UserResponse, error)
	DeleteUser(ctx context.Context, in *UserID, opts ...client.CallOption) (*Response, error)
	UpdateUser(ctx context.Context, in *UserInput, opts ...client.CallOption) (*Response, error)
	GetUser(ctx context.Context, in *UserID, opts ...client.CallOption) (*UserResponse, error)
}

type crudUserService struct {
	c    client.Client
	name string
}

func NewCrudUserService(name string, c client.Client) CrudUserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "gotest"
	}
	return &crudUserService{
		c:    c,
		name: name,
	}
}

func (c *crudUserService) CreateNewUser(ctx context.Context, in *UserInput, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "CrudUser.CreateNewUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudUserService) DeleteUser(ctx context.Context, in *UserID, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "CrudUser.DeleteUser", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudUserService) UpdateUser(ctx context.Context, in *UserInput, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "CrudUser.UpdateUser", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudUserService) GetUser(ctx context.Context, in *UserID, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "CrudUser.GetUser", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CrudUser service

type CrudUserHandler interface {
	CreateNewUser(context.Context, *UserInput, *UserResponse) error
	DeleteUser(context.Context, *UserID, *Response) error
	UpdateUser(context.Context, *UserInput, *Response) error
	GetUser(context.Context, *UserID, *UserResponse) error
}

func RegisterCrudUserHandler(s server.Server, hdlr CrudUserHandler, opts ...server.HandlerOption) error {
	type crudUser interface {
		CreateNewUser(ctx context.Context, in *UserInput, out *UserResponse) error
		DeleteUser(ctx context.Context, in *UserID, out *Response) error
		UpdateUser(ctx context.Context, in *UserInput, out *Response) error
		GetUser(ctx context.Context, in *UserID, out *UserResponse) error
	}
	type CrudUser struct {
		crudUser
	}
	h := &crudUserHandler{hdlr}
	return s.Handle(s.NewHandler(&CrudUser{h}, opts...))
}

type crudUserHandler struct {
	CrudUserHandler
}

func (h *crudUserHandler) CreateNewUser(ctx context.Context, in *UserInput, out *UserResponse) error {
	return h.CrudUserHandler.CreateNewUser(ctx, in, out)
}

func (h *crudUserHandler) DeleteUser(ctx context.Context, in *UserID, out *Response) error {
	return h.CrudUserHandler.DeleteUser(ctx, in, out)
}

func (h *crudUserHandler) UpdateUser(ctx context.Context, in *UserInput, out *Response) error {
	return h.CrudUserHandler.UpdateUser(ctx, in, out)
}

func (h *crudUserHandler) GetUser(ctx context.Context, in *UserID, out *UserResponse) error {
	return h.CrudUserHandler.GetUser(ctx, in, out)
}
